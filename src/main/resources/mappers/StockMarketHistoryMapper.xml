<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thedevjournal.mystocks.mapper.StockMarketHistoryMapper">

    <resultMap id="stockMarketHistoryResponse"
               type="com.thedevjournal.mystocks.dto.response.StockMarketHistoryResponseDto">
        <result property="date" column="date"/>
        <result property="time" column="time"/>
        <result property="index" column="index"/>
        <result property="pointsChange" column="pointsChange"/>
        <result property="percentageChange" column="percentageChange"/>
        <collection property="stocks" javaType="List" columnPrefix="s_"
                    ofType="com.thedevjournal.mystocks.dto.response.StockHistoryResponseDto">
            <result property="scrip" column="scrip"/>
            <result property="ltp" column="ltp"/>
            <result property="pointsChange" column="pointsChange"/>
            <result property="percentageChange" column="percentageChange"/>
            <result property="open" column="open"/>
            <result property="high" column="high"/>
            <result property="low" column="low"/>
        </collection>
    </resultMap>

    <select id = "updateLiveData"
            parameterType="com.thedevjournal.mystocks.dto.request.StockMarketHistoryRequestDto"
            resultType="java.lang.Long">
        WITH upsert AS (
            INSERT INTO stock_market_history (id, date, time, index, percentage_change)
                VALUES (nextval('stock_market_history_seq'), #{request.date}, #{request.time}, #{request.index}, #{request.percentageChange})
            ON CONFLICT (date)
            DO UPDATE SET
                time = EXCLUDED.time,
                index = EXCLUDED.index,
                percentage_change = EXCLUDED.percentage_change
            RETURNING id
        )
        SELECT id FROM upsert;
    </select>

    <select id="getCurrentData" resultMap="stockMarketHistoryResponse">
        <![CDATA[
            WITH previous_data AS (
                SELECT smho.index AS previous_index
                FROM stock_market_history smho
                WHERE smho.date = (
                    SELECT MAX(date) AS previous_date
                    FROM stock_market_history
                    WHERE date < (
                        SELECT MAX(date) FROM stock_market_history
                    )
                )
            ),
            present_data AS (
            SELECT
            smh.date as date,
            smh.time as time,
            smh.index as index,
            smh.percentage_change as percentageChange,
            c.scrip as s_scrip,
            sh.ltp as s_ltp,
            sh.points_change as s_pointsChange,
            sh.percentage_change as s_percentageChange,
            sh.open as s_open,
            sh.high as s_high,
            sh.low as s_low
            FROM stock_market_history smh
            INNER JOIN stock_history sh ON sh.stock_market_history_id = smh.id
            INNER JOIN companies c on sh.company_id = c.id
            WHERE smh.date = (SELECT max(smh1.date) FROM stock_market_history smh1)
            )
            SELECT
            date,
            time,
            index,
            (index - pd.previous_index) as pointsChange,
            percentageChange,
            s_scrip,
            s_ltp,
            s_pointsChange,
            s_percentageChange,
            s_open,
            s_high,
            s_low
            FROM present_data
            CROSS JOIN previous_data pd
            ORDER BY s_scrip;
        ]]>
    </select>

    <select id="getRecentData" resultType="com.thedevjournal.mystocks.dto.response.RecentMarketDataResponseDto">
        SELECT
        to_char(smh.date, 'Mon DD') as date,
        smh.index as index
        FROM stock_market_history smh
        ORDER BY smh.date DESC
        LIMIT 60;
    </select>

    <select id="getTopChanges" resultType="com.thedevjournal.mystocks.dto.response.PercentageChangeResponseDto">
        <![CDATA[
            WITH RecentDates AS (
            SELECT
            date
            FROM
            stock_market_history
            ORDER BY
            date DESC
            LIMIT #{days}
            ),
            FilteredStockHistory AS (
            SELECT
            sh.company_id,
            c.scrip,
            smh.date,
            1 + sh.percentage_change / 100.0 AS growth_factor,
            sh.percentage_change,
            sh.ltp,
            RANK() OVER (PARTITION BY sh.company_id ORDER BY smh.date DESC) AS rank_date
            FROM
            stock_history sh
            JOIN
            companies c ON sh.company_id = c.id
            JOIN
            stock_market_history smh ON sh.stock_market_history_id = smh.id
            JOIN sectors s ON c.sector_id = s.id
            WHERE
            smh.date IN (SELECT date FROM RecentDates)
            AND s.name NOT IN ('Mutual Fund', 'Corporate Debentures','Government Bonds', 'Capital')
            ),
            GrowthFactors AS (
            SELECT
            company_id,
            scrip,
            EXP(SUM(LN(growth_factor))) AS cumulative_growth_factor,
            MAX(CASE WHEN rank_date = 1 THEN percentage_change END) AS latest_date_percentage_change,
            MAX(CASE WHEN rank_date = 1 THEN ltp END) AS ltp
            FROM
            FilteredStockHistory
            GROUP BY
            company_id, scrip
            )

            SELECT
            company_id,
            scrip,
            ROUND((cumulative_growth_factor - 1) * 100, 2) AS totalPercentageChange,
            ROUND(latest_date_percentage_change, 2) AS latestPercentageChange,
            ltp
            FROM
            GrowthFactors
            WHERE
            (#{gainers} AND ((CASE WHEN #{days} > 1 THEN ROUND((cumulative_growth_factor - 1) * 100, 2) > 0
                               WHEN #{days} = 1 THEN ROUND(latest_date_percentage_change, 2) > 0 END)))
            OR
            (#{gainers} = false AND ((CASE WHEN #{days} > 1 THEN ROUND((cumulative_growth_factor - 1) * 100, 2) < 0
                               WHEN #{days} = 1 THEN ROUND(latest_date_percentage_change, 2) < 0 END)))
            ORDER BY
            totalPercentageChange
        ]]>
    </select>

</mapper>