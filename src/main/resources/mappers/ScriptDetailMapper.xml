<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.share.mapper.ScriptDetailMapper">
    <select id="groupByScript" resultType="com.example.share.dto.response.ScriptDetailResponseDto">
        WITH Transactions AS (
            SELECT s.symbol as symbol,
                st.transaction_type as transaction_type,
                st.share_type as share_type,
                st.quantity as quantity,
                st.rate as rate,
            CASE
                WHEN st.transaction_type = 'BUY' THEN st.quantity * st.rate
                    ELSE 0
                END AS buy_amount,
            CASE
                WHEN st.transaction_type = 'SELL' THEN st.quantity * st.rate
                    ELSE 0
                END AS sell_amount
            FROM script_transactions st
            INNER JOIN scripts s on st.script_id = s.id
        ),
        Aggregated AS (
            SELECT
                symbol,
                SUM(CASE WHEN transaction_type = 'BUY' THEN quantity ELSE 0 END) AS total_buy_quantity,
                SUM(CASE WHEN transaction_type = 'SELL' THEN quantity ELSE 0 END) AS total_sell_quantity,
                SUM(buy_amount) AS total_buy,
                SUM(sell_amount) AS total_sell,
                SUM(CASE
                        WHEN transaction_type = 'BUY' THEN quantity ELSE 0 END) - SUM(CASE WHEN transaction_type = 'SELL'
                        THEN quantity ELSE 0 END) AS current_quantity,
                CASE
                    WHEN SUM(CASE
                                WHEN transaction_type = 'BUY' THEN quantity ELSE 0 END) - SUM(CASE WHEN transaction_type = 'SELL'
                                THEN quantity ELSE 0 END) = 0
                    THEN SUM(sell_amount) - SUM(buy_amount)
                    ELSE SUM(buy_amount) - SUM(sell_amount)
                END AS current_investment
            FROM Transactions
            GROUP BY symbol
        ),
        PricePerShare AS (
            SELECT
                symbol,
                CASE
                    WHEN current_quantity > 0 THEN
                        CEIL((current_investment / current_quantity) * 100) / 100
                    ELSE 0
                END AS price_per_share
            FROM Aggregated
        )
        SELECT
            a.symbol as symbol,
            a.total_buy_quantity as totalBuyQuantity,
            a.total_sell_quantity as totalSellQuantity,
            a.total_buy as totalBuy,
            a.total_sell as totalSell,
            a.current_quantity as currentQuantity,
            a.current_investment as currentInvestment,
            COALESCE(p.price_per_share, 0) AS pricePerShare
        FROM Aggregated a
        LEFT JOIN PricePerShare p ON a.symbol = p.symbol
        ORDER BY a.symbol;
    </select>
</mapper>
